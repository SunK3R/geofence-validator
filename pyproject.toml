# ==============================================================================
# pyproject.toml - Configuration for the geofence-validator library
#
# This file centralizes package metadata, build system configuration, and tool
# settings (linter, formatter, type checker, test runner) into a single,
# standard-compliant file as defined by PEP 518, PEP 621, and others.
# ==============================================================================

[build-system]
# Defines the build backend and its requirements.
# We use setuptools, the standard and robust choice for Python packaging.
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"


[project]
# Core project metadata as defined by PEP 621.
# This information is used by package managers like pip and displayed on PyPI.
name = "geofence-validator"
version = "0.1.0"
description = "A zero-dependency, deterministic library for IP-based geofence validation against whitelist/blacklist policies."
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
keywords = ["geofence", "geoip", "security", "validation", "network", "acl"]

authors = [
  { name = "Sooraj K R", email = "soorajkr03@gmail.com" },
]
maintainers = [
  { name = "Sooraj K R", email = "soorajkr03@gmail.com" },
]

# Classifiers help users find your project on PyPI by categorizing it.
# See: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Typing :: Typed",
]

# As per the project requirements, this library is zero-dependency.
dependencies = []

[project.urls]
# Provides helpful links on the project's PyPI page.
Homepage = "https://github.com/SunK3R/geofence-validator"
Repository = "https://github.com/SunK3R/geofence-validator"
"Bug Tracker" = "https://github.com/SunK3R/geofence-validator/issues"
Documentation = "https://github.com/SunK3R/geofence-validator/blob/main/README.md"


# ------------------------------------------------------------------------------
# Tool-specific Configurations
# ------------------------------------------------------------------------------

[tool.setuptools]
# Tells setuptools where to find the package source code.
package-dir = {"" = "."}
# Explicitly list the packages to be included in the distribution.
packages = ["geofence_validator"]
# Include non-Python files found in the package.
package-data = {"geofence_validator" = ["data/*.csv"]}


[tool.ruff]
# Configuration for Ruff, the all-in-one linter and formatter.
# https://docs.astral.sh/ruff/
line-length = 88
indent-width = 4
target-version = "py39" # Enforce compatibility with Python 3.9+

# Rule selection: A sensible default set for a robust library.
# E/W: pycodestyle errors/warnings
# F: Pyflakes (logic errors)
# I: isort (import sorting)
# UP: pyupgrade (modernize syntax)
# B: flake8-bugbear (common bugs)
# C4: flake8-comprehensions (idiomatic comprehensions)
# SIM: flake8-simplify (code simplification)
# T20: flake8-print (disallow print statements)
select = ["E", "W", "F", "I", "UP", "B", "C4", "SIM", "T20"]
ignore = []

# Exclude common directories that don't need linting.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "venv",
]

[tool.ruff.format]
# Configuration for the Ruff formatter (equivalent to Black).
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true # Format code examples in docstrings.

[tool.mypy]
# Configuration for MyPy, the static type checker.
# Enforces the project's strict typing policy.
python_version = "3.9"

# Strictness flags
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

# Project structure
mypy_path = "."
exclude = ["venv", ".venv", "build", "dist"]


[tool.pytest.ini_options]
# Configuration for Pytest, the test runner.
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"

# Default command-line arguments for pytest.
# -ra: show extra test summary info for all but passed tests
# --strict-markers: fail on unregistered pytest markers
# --import-mode=importlib: modern import handling
addopts = "-ra --strict-markers --import-mode=importlib"

[project.optional-dependencies]
# Dependencies required for development, testing, and maintenance scripts.
# These are NOT installed for the end-user.
# Install with: pip install ".[dev]"

rich = [
    "rich>=13.0.0",
]

dev = [
    "pytest>=7.0",
    "ruff>=0.1",
    "mypy>=1.6",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "pytest-cov>=5.0.0",
]